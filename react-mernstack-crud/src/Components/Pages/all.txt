
this.state.name,
            this.state.email,
            this.state.rollno


            http://localhost:4000/students/CreateStudent
// export default App;
import axios from 'axios'; 

import React,{Component} from 'react'; 

class App extends Component { 

	state = { 

	// Initially, no file is selected 
	selectedFile: null
	}; 
	
	// On file select (from the pop up) 
	onFileChange = event => { 
	
	// Update the state 
	this.setState({ selectedFile: event.target.files[0] }); 
	
	}; 
	
	// On file upload (click the upload button) 
	onFileUpload = () => { 
	
	// Create an object of formData 
	const formData = new FormData(); 
	
	// Update the formData object 
	formData.append( 
		"filename", 
		this.state.selectedFile, 
		this.state.selectedFile.name 
	); 
	
	// Details of the uploaded file 
	console.log(this.state.selectedFile); 
	
	// Request made to the backend api 
	// Send formData object 
  axios.post('https://v2.convertapi.com/upload',formData).then(res=>{
    alert("The file is successfully uploaded");
    console.log(res.data);
})
	}; 
	
	// File content to be displayed after 
	// file upload is complete 
	fileData = () => { 
	
	if (this.state.selectedFile) { 
		
		return ( 
		<div> 
			<h2>File Details:</h2> 
			<p>File Name: {this.state.selectedFile.name}</p> 
			<p>File Type: {this.state.selectedFile.type}</p> 
			<p> 
			Last Modified:{" "} 
			{this.state.selectedFile.lastModifiedDate.toDateString()} 
			</p> 
		</div> 
		); 
	} else { 
		return ( 
		<div> 
			<br /> 
			<h4>Choose before Pressing the Upload button</h4> 
		</div> 
		); 
	} 
	}; 
	
	render() { 
	
	return ( 
		<div> 
			<h1> 
			GeeksforGeeks 
			</h1> 
			<h3> 
			File Upload using React! 
			</h3> 
			<div> 
				<input type="file" onChange={this.onFileChange} /> 
				<button onClick={this.onFileUpload}> 
				Upload! 
				</button> 
			</div> 
		{this.fileData()} 
		</div> 
	); 
	} 
} 

export default App; 

=============================


// var multer = require('multer');

// var storage = multer.diskStorage({
//     destination: (req, file, cb) => {
//         cb(null, '/public')
//     },
//     filename: (req, file, cb) => {
//         cb(null, file.fieldname + '-' + Date.now())
//     }
// });

// var upload = multer({ storage: storage });

// console.log(upload);

// router.route('/CreateStudent').post(upload.single('image'),(req,res,next)=>{
//     var obj = {
//         name: req.body.name,
//         email: req.body.email,
//         rollno : req.body.rollno,
//         selectedFile: {
//             data: fs.readFileSync(path.join(__dirname + '/public/' + req.file.filename)),
//             contentType: 'image/png'
//         }
//     }
//     studentschema.create(obj, (err, item) => {
//         if (err) {
//             console.log(err);
//         }
//         else {
//             //item.save();
//             res.redirect('/');
//         }
//     });
// })

let multer = require('multer');
let uuidv4 = require('uuid');


//file upload
// const DIR = './public/';

// const storage = multer.diskStorage({
//     destination: (req, file, cb) => {
//         cb(null, DIR)
//     },
//     filename: (req, file, cb) => {
//         const fileName = file.originalname.toLowerCase().split(' ').join('-');
//         cb(null, uuidv4() + '-' + fileName)
//     }
// });

// var upload = multer({
//     storage: storage,
//     fileFilter: (req, file, cb) => {
//         if (file.mimetype == "image/png" || file.mimetype == "image/jpg" || file.mimetype == "image/jpeg") {
//             cb(null, true);
//         } else {
//             cb(null, false);
//             return cb(new Error('Only .png, .jpg and .jpeg format Allowed!'));
//         }
//     }
// })

// router.post('/CreateStudent',upload.single('profileImg'),(req, res, next) => {
//     studentschema.create(req.body, req.file, (error, data) => {
       
//         if (error) {
//             return next(error)
//         }
//         else {
//             console.log(data);
//             res.json(data);
//             console.log(req.file);
//         }
//     })
//     // var studentschema = new studentschema();
//     // studentschema.name = req.body.name;
//     // studentschema.email = req.body.email;
//     // studentschema.rollno = req.body.body.rollno;
//     // studentschema.selectedFile = req.body.selectedFile;
//     // studentschema.save((err,doc)=>{
//     //     if(!err){
//     //         console.log(doc);
//     //     }else{
//     //         console.log('Error during record insertion'+err);
//     //     }
//     // })
// })

====================================================

let mongoose = require('mongoose');
let express = require('express');
let router = express.Router();
let uuidv4 = require('uuid');
const path = require('path');
var file = require('fs');

let studentschema = require('../Models/StudentModel');

var multer = require('multer');

// file
// var storage = multer.diskStorage({
//     destination: function (req, file, callback) {
//         callback(null, './public/');
//     },
//     filename: function (req, file, callback) {
//         callback(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));
//     }
// });

//create
router.route('/CreateStudent').post((req, res, next) => {
    //console.log("hello");

    var upload = multer({ storage : storage });

    upload(req, res, function (err) {
        console.log("Request ---", req.body);
        console.log("Request file ---", req.file);//Here you get file.
        res.sendStatus(200);
        console.log("ok file ok");
    });

    studentschema.create(req.body, req.file, (error, data) => {
        if (!req.file) {
            console.log(req.file);
        }
        if (error) {
            return next(error)
        }
        else {
            console.log(data);
            console.log(req.file);
            res.json(data);
        }
    })
})

// read students
router.route('/').get((req, res) => {
    studentschema.find((error, data) => {
        if (error) {
            return next(error)
        } else {
            //console.log(data);
            res.json(data);
        }
    })
})

//get single student
router.route('/EditStudent/:id').get((req, res) => {
    studentschema.findById(req.params.id, (error, data) => {
        if (error) {
            return next(error)
        } else {
            //console.log(data);
            res.json(data);
        }
    })
})

//update student
router.route('/UpdateStudent/:id').put((req, res, next) => {
    studentschema.findByIdAndUpdate(req.params.id, { $set: req.body }, (error, data) => {
        if (error) {
            console.log(error);
            return next(error);
        } else {
            //console.log(data);
            res.json(data);
            console.log('Student updated successfully !')
        }
    })
})

//delete student
router.route('/DeleteStudent/:id').delete((req, res, next) => {
    studentschema.findByIdAndRemove(req.params.id, (error, data) => {
        if (error) {
            return next(error);
        } else {
            res.status(200).json({
                msg: data
            })
        }
    })
})

module.exports = router;



============================================
import React, { Component, useState , useEffect } from 'react';
import axios from 'axios';
import { Table } from 'react-bootstrap';
import StudentTableRow from './StudentTableRow';



//export default class StudentList  extends Component {
const StudentList = () => {
    
    //constructor(props) {  


        //super(props)
        //this.users = { students: [] };
    //}

    const [users, setUser] = useState([]);
    
    const loadUsers = async () => {
        
        const result = await axios.get('http://localhost:4000/students/');
        console.log("re",result);
        setUser(result.data);
        
        console.log("da",result.data);
        
        // .then(res=>{
            //     this.setState({ students : res.data });
            //     console.log("ss",ss);
            // })
            // .catch((error)=>{
            //     console.log(error);
            // })
    }


    useEffect(() => {
        loadUsers();
        console.log("ok");
    },[]);

    console.log("sas",users);

    
    // DataTable() {
    //     return this.state.students.map((res, i) => {
    //       return <StudentTableRow obj={res} key={i} />;
    //     });
    // }

        return (
        <div>
            <div>
                <h1 style={{margin:'20px 0 20px 0'}}>React Student List Component!</h1>
            </div>

            <div className="table-wrapper">
                <Table className="striped bordered hover table-hover">
                    <thead>
                        <tr>
                            <th>Index</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>ROll No</th>
                            <th>Image</th>
                            <th>Action</th>
                        </tr>
                    </thead>

                    <tbody>
                        {/* {this.DataTable()} */}
                        
                        { users.map((user , index) => (
                            <tr>
                                <th scope="row">{index + 1}</th>
                                <td>{user.name}</td>
                                <td>{user.email}</td>
                                <td>{user.rollno}</td>
                                <td>{user.selectedFile}</td>
                            </tr>
                        ))}

                    </tbody>
                </Table>
            </div>
        </div>
        )
    
};

export default StudentList;
